# Global configuration
global
    maxconn 20000
    log stdout format raw local0
    #log /dev/log local0
    #stats socket /var/run/haproxy/admin.sock mode 600 level admin
    stats timeout 30s
    daemon
    tune.ssl.default-dh-param 2048

    # generated 2020-04-07, Mozilla Guideline v5.4, HAProxy 2.1, OpenSSL 1.1.1d, intermediate configuration, no HSTS, no OCSP
    # https://ssl-config.mozilla.org/#server=haproxy&version=2.1&config=intermediate&openssl=1.1.1d&hsts=false&ocsp=false&guideline=5.4
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets


# Defaults configuration
defaults
    maxconn 2000
    log global
    mode http
    option httplog
    option dontlognull
    option http-buffer-request
    timeout connect 10s
    timeout client 60s
    timeout server 60s
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout tarpit 10s
    errorfile 503 /usr/local/etc/haproxy/errors/503.http


# Default endpoint
listen default_endpoint
    description "Ports: 8080"
    bind *:8080
    http-request deny deny_status 400 content-type 'text/plain' string "HTTP/1.0 Version Not Supported" if HTTP_1.0

    # Log format - add tracecontext info to default http log pattern
    log-format "%ci:%cp [%tr] (%[var(txn.traceparent)]) (%[var(txn.tracestate)]) %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

    # Trace-parent handling
    acl is_traceparent req.hdr(traceparent) -m found
    http-request set-var(txn.traceparent) req.hdr(traceparent) if is_traceparent                                                # copy to var for logger
    http-request set-var(txn.tracestate) req.hdr(tracestate)                                                                    # copy to var for logger
    http-request set-var(req.traceid) uuid(),regsub('-','','g'),bytes(0,32),lower unless is_traceparent                         # generate trace-id
    http-request set-var(req.parentid) uuid(),regsub('-','','g'),bytes(0,16),lower unless is_traceparent                        # generate span-id
    http-request set-var(txn.traceparent) str(),concat('00-',req.traceid,),concat('-',req.parentid,'-01') unless is_traceparent # generate traceparent
    http-request set-header traceparent var(txn.traceparent) unless is_traceparent                                              # set generated traceparent if header is missing

    # Return tracecontext in response (debug)
    http-after-response set-header x-traceparent %[var(txn.traceparent)]
    http-after-response set-header x-tracestate %[var(txn.tracestate)]

    # Simple response
    http-request return status 200 content-type text/plain lf-string "txn.traceparent: %[var(txn.traceparent)]\n\rtxn.tracestate: %[var(txn.tracestate)]"
